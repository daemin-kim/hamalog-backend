name: Deploy to Production on Main Push

# Trigger this workflow when code is pushed to the main branch
on:
  push:
    branches:
      - main
  # Allow manual triggering from GitHub UI
  workflow_dispatch:

# Set environment variables that can be used across all jobs
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: Deploy Hamalog Application
    runs-on: ubuntu-latest
    
    # Required permissions for the workflow
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v3
        continue-on-error: true
        timeout-minutes: 5
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and test application
        run: |
          echo "üî® Building and testing the application..."
          ./gradlew clean build
          
      - name: Debug Docker metadata
        run: |
          echo "üîç Docker metadata debugging:"
          echo "  - Generated tags: ${{ steps.meta.outputs.tags }}"
          echo "  - Generated labels: ${{ steps.meta.outputs.labels }}"
          echo "  - Expected SHA tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Verify pushed image
        run: |
          echo "üîç Verifying pushed image tags..."
          echo "Expected SHA-based tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          # Try to inspect the SHA-based tag directly
          if docker manifest inspect "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"; then
            echo "‚úÖ SHA-based tag found in registry"
          else
            echo "‚ùå SHA-based tag not found, checking what was actually pushed..."
            echo "üîç Checking all pushed tags:"
            
            # Extract all tags that were pushed
            PUSHED_TAGS="${{ steps.meta.outputs.tags }}"
            echo "Pushed tags: $PUSHED_TAGS"
            
            # Try each tag individually
            for tag in $PUSHED_TAGS; do
              echo "Checking tag: $tag"
              if docker manifest inspect "$tag" > /dev/null 2>&1; then
                echo "‚úÖ Found: $tag"
              else
                echo "‚ùå Not found: $tag"
              fi
            done
          fi
          
      - name: Deploy to production server
        run: |
          echo "üöÄ Starting deployment process..."
          
          # Make deploy script executable (redundant but safe)
          chmod +x ./deploy.sh
          
          # Verify Docker login status
          echo "üîç Verifying Docker registry access..."
          docker info | grep -A5 "Registry Mirrors" || true
          
          # Set environment variables for production deployment
          export SPRING_PROFILES_ACTIVE=prod
          export GITHUB_REPOSITORY="${{ github.repository }}"
          export GITHUB_SHA="${{ github.sha }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export JWT_EXPIRY="${{ secrets.JWT_EXPIRY || '3600000' }}"
          export KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}"
          export KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}"
          export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
          export DB_NAME="${{ secrets.DB_NAME || 'Hamalog' }}"
          export DB_USERNAME="${{ secrets.DB_USERNAME || 'hamalog_user' }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD || 'hamalog_password' }}"
          
          # Debug environment variables (without secrets)
          echo "üîç Environment variables check:"
          echo "  - GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "  - GITHUB_SHA: ${GITHUB_SHA}"
          echo "  - Expected image: ghcr.io/${GITHUB_REPOSITORY}:${GITHUB_SHA}"
          
          # Verify the image was pushed successfully
          echo "üîç Verifying image availability in registry..."
          echo "Primary check: ghcr.io/${{ github.repository }}:${{ github.sha }}"
          
          if docker manifest inspect ghcr.io/${{ github.repository }}:${{ github.sha }}; then
            echo "‚úÖ Primary SHA-based image found in registry"
          else
            echo "‚ùå Primary SHA-based image not found in registry"
            echo "üîç This might be due to:"
            echo "  1. Build/push step failed"
            echo "  2. Registry authentication issues" 
            echo "  3. Tag mismatch between build and deploy steps"
            
            echo "üîç Checking alternative tag formats..."
            # Try with sha- prefix
            if docker manifest inspect "ghcr.io/${{ github.repository }}:sha-${{ github.sha }}" > /dev/null 2>&1; then
              echo "‚úÖ Found alternative format: ghcr.io/${{ github.repository }}:sha-${{ github.sha }}"
            else
              echo "‚ùå Alternative format not found either"
            fi
            
            echo "üîç Checking available tags in registry:"
            curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://ghcr.io/v2/${{ github.repository }}/tags/list" | jq -r '.tags[]? // empty' | head -10 || {
              echo "Failed to fetch registry tags, trying alternative method..."
              docker search ghcr.io/${{ github.repository }} || true
            }
            
            echo "üîç Registry connectivity test:"
            curl -s -I "https://ghcr.io/v2/" && echo "‚úÖ Registry accessible" || echo "‚ùå Registry access failed"
            
            echo "‚ö†Ô∏è  Deploy script will attempt multiple tag formats and fallbacks"
          }
          
          # Run the deployment script
          ./deploy.sh
          
      - name: Post-deployment verification
        run: |
          echo "‚úÖ Verifying deployment..."
          
          # Wait for application to fully start
          sleep 30
          
          # Check if containers are running
          docker compose -p hamalog ps
          
          # Try to connect to the application (basic connectivity test)
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt: Testing application connectivity..."
            
            if curl -f -s -m 10 http://localhost:8080/ >/dev/null 2>&1 || \
               curl -f -s -m 10 http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "‚úÖ Application is responding successfully!"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Application health check failed after $max_attempts attempts"
              echo "üìã Application logs:"
              docker compose -p hamalog logs hamalog-app --tail=100
              exit 1
            fi
            
            echo "‚è≥ Waiting 10 seconds before next attempt..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
      - name: Cleanup old Docker images
        run: |
          echo "üßπ Cleaning up old Docker images to save disk space..."
          
          # Remove dangling images
          docker image prune -f || true
          
          # Keep only the 3 most recent images of this repository
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "{{.ID}} {{.CreatedAt}}" | \
            sort -k2 -r | tail -n +4 | awk '{print $1}' | xargs -r docker rmi || true
            
      - name: Send deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "üéâ Deployment completed successfully!"
            echo "‚úÖ Hamalog application is now running with the latest changes from main branch"
            echo "üåê Application URL: http://localhost:8080"
          else
            echo "‚ùå Deployment failed!"
            echo "üîç Check the logs above for error details"
          fi