name: 메인 브랜치 푸시 시 프로덕션 배포

# 메인 브랜치에 코드가 푸시될 때 이 워크플로우를 실행
on:
  push:
    branches:
      - main
  # GitHub UI에서 수동 트리거 허용
  workflow_dispatch:

# 모든 작업에서 사용할 수 있는 환경 변수 설정
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: Hamalog 애플리케이션 배포
    runs-on: ubuntu-latest
    
    # 워크플로우에 필요한 권한
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        
      - name: Java 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Gradle 패키지 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: gradlew 실행 권한 부여
        run: chmod +x ./gradlew
        
      - name: 애플리케이션 빌드 및 테스트
        run: |
          echo "🔨 애플리케이션을 빌드하고 테스트하는 중..."
          ./gradlew clean build
          
      - name: 컨테이너 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 프로덕션 서버에 배포
        run: |
          echo "🚀 배포 프로세스를 시작하는 중..."
          
          # 프로덕션 배포용 환경 변수 설정 (docker-build.yml과 동기화)
          export SPRING_PROFILES_ACTIVE=prod
          export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
          export DB_NAME="${{ secrets.DB_NAME }}"
          export DB_USERNAME="${{ secrets.DB_USERNAME }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export JWT_EXPIRY="${{ secrets.JWT_EXPIRY }}"
          export KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}"
          export KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}"
          
          # 시크릿이 비어있을 경우 기본값 설정 (docker-build.yml 접근 방식과 일치)
          if [ -z "$MYSQL_ROOT_PASSWORD" ]; then export MYSQL_ROOT_PASSWORD="mypassword"; fi
          if [ -z "$DB_NAME" ]; then export DB_NAME="Hamalog"; fi
          if [ -z "$DB_USERNAME" ]; then export DB_USERNAME="user"; fi
          if [ -z "$DB_PASSWORD" ]; then export DB_PASSWORD="password"; fi
          if [ -z "$JWT_SECRET" ]; then export JWT_SECRET="xcrVqYlPMcLeEoEX+h8vjxZ97lS6AETwQJXJSLJ/h8g="; fi
          if [ -z "$JWT_EXPIRY" ]; then export JWT_EXPIRY="3600000"; fi
          
          # 동기화된 docker-compose 설정 생성
          cat > docker-compose.prod.yml << EOF
          services:
            hamalog-app:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              ports:
                - "8080:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=prod
                - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-hamalog:3306/\${DB_NAME}
                - SPRING_DATASOURCE_USERNAME=\${DB_USERNAME}
                - SPRING_DATASOURCE_PASSWORD=\${DB_PASSWORD}
                - SPRING_DATA_REDIS_HOST=redis
                - SPRING_DATA_REDIS_PORT=6379
                - JWT_SECRET=\${JWT_SECRET}
                - JWT_EXPIRY=\${JWT_EXPIRY}
                - KAKAO_CLIENT_ID=\${KAKAO_CLIENT_ID}
                - KAKAO_CLIENT_SECRET=\${KAKAO_CLIENT_SECRET}
              depends_on:
                mysql-hamalog:
                  condition: service_healthy
                redis:
                  condition: service_healthy
              restart: unless-stopped

            redis:
              image: redis:7-alpine
              ports:
                - "6379:6379"
              command: redis-server --appendonly yes
              volumes:
                - redis-data:/data
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 30s
                timeout: 10s
                retries: 3

            mysql-hamalog:
              image: mysql:8.0
              ports:
                - "3306:3306"
              environment:
                - MYSQL_ROOT_PASSWORD=\${MYSQL_ROOT_PASSWORD}
                - MYSQL_DATABASE=\${DB_NAME}
                - MYSQL_USER=\${DB_USERNAME}
                - MYSQL_PASSWORD=\${DB_PASSWORD}
              volumes:
                - mysql-data:/var/lib/mysql
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p\${MYSQL_ROOT_PASSWORD}"]
                interval: 30s
                timeout: 10s
                retries: 3

          volumes:
            mysql-data:
            redis-data:
          EOF
          
          # 기존 컨테이너 중지
          echo "🛑 기존 컨테이너를 중지하는 중..."
          docker compose -p hamalog -f docker-compose.prod.yml down --remove-orphans || true
          
          # 최신 이미지 가져오기
          echo "⬇️ 최신 이미지를 가져오는 중..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # 서비스 시작
          echo "🚀 서비스를 시작하는 중..."
          docker compose -p hamalog -f docker-compose.prod.yml up -d
          
      - name: 배포 확인
        run: |
          echo "✅ 배포를 확인하는 중..."
          
          # 애플리케이션 시작 대기
          sleep 30
          
          # 컨테이너 상태 확인
          docker compose -p hamalog -f docker-compose.prod.yml ps
          
          # 기본 상태 확인
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "시도 $attempt: 애플리케이션 테스트 중..."
            
            if curl -f -s -m 10 http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "✅ 애플리케이션이 정상 상태입니다!"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ 상태 확인 실패"
              docker compose -p hamalog -f docker-compose.prod.yml logs hamalog-app --tail=50
              exit 1
            fi
            
            sleep 10
            attempt=$((attempt + 1))
          done
          
      - name: 정리 작업
        run: |
          echo "🧹 정리 작업 중..."
          rm -f docker-compose.prod.yml
          docker image prune -f || true
          
      - name: 배포 알림
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 배포가 성공적으로 완료되었습니다!"
            echo "🌐 애플리케이션 URL: http://localhost:8080"
          else
            echo "❌ 배포에 실패했습니다!"
          fi