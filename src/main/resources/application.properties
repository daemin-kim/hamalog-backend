spring.application.name=Hamalog
hamalog.upload.image-dir=/data/hamalog/images
spring.docker.compose.enabled=false

spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=warn
logging.level.org.hibernate.type.descriptor.sql=warn

spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:h2:mem:hamalog;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:sa}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:}

# H2 Console (enabled for local development)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JPA Settings (adjusted for development with H2)
spring.jpa.hibernate.ddl-auto=update

# OAuth2 Kakao Configuration - Enhanced to handle empty environment variables
# Custom handling implemented in OAuth2EmptyVariableHandler to deal with empty env vars
spring.security.oauth2.client.registration.kakao.client-id=${hamalog.oauth2.kakao.client-id:dummy-client-id-for-development}
spring.security.oauth2.client.registration.kakao.client-secret=${hamalog.oauth2.kakao.client-secret:dummy-client-secret-for-development}
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect-uri=${hamalog.oauth2.kakao.redirect-uri:http://localhost:8080/login/oauth2/code/kakao}
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email
spring.security.oauth2.client.registration.kakao.client-name=kakao

spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# Configure JWT - Environment variable based for security
# Generate a secure 256-bit (32-byte) Base64 secret: 
# Example: openssl rand -base64 32
# jwt.secret should be a Base64-encoded 256-bit value from environment variable
# RECOMMENDED: Set JWT_SECRET environment variable with base64-encoded 256-bit key
# Fallback provided for development environments
jwt.secret=${JWT_SECRET:xcrVqYlPMcLeEoEX+h8vjxZ97lS6AETwQJXJSLJ/h8g=}
jwt.expiry=${JWT_EXPIRY:3600000}

# OAuth2 success redirect target (frontend page to receive token via query string)
hamalog.oauth2.redirect-uri=${FRONTEND_URL:http://localhost:3000}/oauth/kakao

# Logging Configuration
# Log levels are configured in logback-spring.xml for better control
logging.level.com.Hamalog=info
logging.level.org.springframework.security=info

# Log directory configuration (overridable via environment variable)
logging.file.path=${LOG_DIR:./logs}

# Logback configuration will handle patterns and file outputs

# Request Size Limits (DoS Protection)
# Maximum HTTP request size (default: 10MB for API requests, 50MB for file uploads)
server.max-http-request-header-size=64KB

# Tomcat connector configuration for request limits
server.tomcat.max-http-form-post-size=10MB
server.tomcat.max-swallow-size=10MB
server.tomcat.connection-timeout=20s
server.tomcat.max-connections=8192
server.tomcat.accept-count=100
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=10

# Spring MVC multipart configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB
spring.servlet.multipart.file-size-threshold=2KB
spring.servlet.multipart.resolve-lazily=false

# Task execution pool settings for async operations
spring.task.execution.pool.max-size=20
spring.task.execution.pool.core-size=8
spring.task.execution.pool.queue-capacity=100
spring.task.execution.pool.keep-alive=60s

# Redis Configuration
# Redis host and port (overridable via environment variables for Docker)
spring.data.redis.host=${SPRING_DATA_REDIS_HOST:localhost}
spring.data.redis.port=${SPRING_DATA_REDIS_PORT:6379}
spring.data.redis.timeout=2000ms
spring.data.redis.connect-timeout=2000ms

# Redis connection pool settings
spring.data.redis.lettuce.pool.max-active=8
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=0
spring.data.redis.lettuce.pool.max-wait=-1ms
