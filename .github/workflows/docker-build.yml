name: Docker 빌드 및 배포

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: self-hosted  # 반드시 self-hosted 러너에서 실행되어야 함
    permissions:
      contents: read
      packages: write

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: JDK 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: gradle

      - name: Gradle 빌드
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Docker 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          file: Dockerfile

      - name: 서버에 배포
        shell: powershell
        run: |
          # 1. 사용자 정의 네트워크가 없다면 생성
          if (-not (docker network ls --format "{{.Name}}" | Select-String "hamalog-network")) {
            docker network create hamalog-network
          }

          # 2. Redis 컨테이너가 없으면 실행
          if (-not (docker ps -a --format "{{.Names}}" | Select-String "redis-hamalog")) {
            docker run -d `
              --name redis-hamalog `
              -p 6379:6379 `
              --network hamalog-network `
              -v C:/redis-data:/data `
              redis:7-alpine redis-server --appendonly yes
            Write-Output "Redis 컨테이너가 생성되었습니다"
            Start-Sleep -Seconds 5  # Redis 부팅 대기
          } else {
            Write-Output "Redis 컨테이너가 이미 존재합니다"
          }

          # 3. MySQL 컨테이너가 없으면 실행
          if (-not (docker ps -a --format "{{.Names}}" | Select-String "mysql-hamalog")) {
            docker run -d `
              --name mysql-hamalog `
              -e MYSQL_ROOT_PASSWORD=mypassword `
              -e MYSQL_DATABASE=Hamalog `
              -e MYSQL_USER=user `
              -e MYSQL_PASSWORD=password `
              -v C:/mysql-data:/var/lib/mysql `
              -p 3306:3306 `
              --network hamalog-network `
              mysql:8.0
            Write-Output "MySQL 컨테이너가 생성되었습니다"
            Start-Sleep -Seconds 20  # MySQL 부팅 대기
          } else {
            Write-Output "MySQL 컨테이너가 이미 존재합니다"
          }

          # 4. 기존 앱 컨테이너 정리
          docker stop hamalog-container -ErrorAction SilentlyContinue
          docker rm hamalog-container -ErrorAction SilentlyContinue

          # 5. 최신 Spring Boot 앱 이미지 pull
          docker pull ghcr.io/daemin-kim/hamalog-backend:latest

          # 6. 앱 컨테이너 실행
          docker run -d `
            --name hamalog-container `
            --network hamalog-network `
            -p 8080:8080 `
            -e SPRING_DATASOURCE_URL=jdbc:mysql://mysql-hamalog:3306/Hamalog `
            -e SPRING_DATASOURCE_USERNAME=user `
            -e SPRING_DATASOURCE_PASSWORD=password `
            -e SPRING_DATA_REDIS_HOST=redis-hamalog `
            -e SPRING_DATA_REDIS_PORT=6379 `
            -e JWT_SECRET=xcrVqYlPMcLeEoEX+h8vjxZ97lS6AETwQJXJSLJ/h8g= `
            -e JWT_EXPIRY=3600000 `
            -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} `
            -e KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} `
            ghcr.io/daemin-kim/hamalog-backend:latest

          Start-Sleep -Seconds 10
          docker logs hamalog-container
